version: '3.8'

services:
  # PostgreSQL Database with production settings
  postgres:
    image: postgres:15-alpine
    container_name: storytime-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-storytime_calendar}
      POSTGRES_USER: ${DB_USER:-storytime}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-storytime} -d ${DB_NAME:-storytime_calendar}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - storytime-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Backend API Service with production optimizations
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: storytime-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-storytime}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-storytime_calendar}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      FRONTEND_URL: ${FRONTEND_URL}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      SLACK_CLIENT_ID: ${SLACK_CLIENT_ID}
      SLACK_CLIENT_SECRET: ${SLACK_CLIENT_SECRET}
      SLACK_REDIRECT_URI: ${SLACK_REDIRECT_URI}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PORT: 5004
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - storytime-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      replicas: 2
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Web Application with production optimizations
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: storytime-frontend-prod
    environment:
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - storytime-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
      replicas: 2

  # Redis Cache for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: storytime-redis-prod
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - storytime-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: storytime-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - storytime-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: storytime-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - storytime-network
    restart: always
    profiles:
      - monitoring

  # Grafana for metrics visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: storytime-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - storytime-network
    restart: always
    profiles:
      - monitoring

  # Log aggregation with Loki (Optional)
  loki:
    image: grafana/loki:latest
    container_name: storytime-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - storytime-network
    restart: always
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  storytime-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Health check and deployment configurations
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

x-logging-defaults: &logging-defaults
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
